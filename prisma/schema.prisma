// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////////
// IDENTITY
//////////////////////

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  passwordHash String
  createdAt    DateTime @default(now())

  personId Int?    @unique
  person   Person? @relation(fields: [personId], references: [id])

  groups               UserGroup[]
  lessonBatchesCreated LessonBatch[] @relation("LessonBatchCreatedBy")
  lessonEventsCreated  LessonEvent[] @relation("LessonEventCreatedBy")
}

model Person {
  id         Int       @id @default(autoincrement())
  firstName  String
  lastName   String
  middleName String?
  birthDate  DateTime?
  phone      String?
  email      String?
  createdAt  DateTime  @default(now())

  user     User?
  student  Student?
  guardian Guardian?
  staff    Staff?
}

//////////////////////
// RBAC
//////////////////////

model Permission {
  id         Int                   @id @default(autoincrement())
  type       String // например: "family", "student", "lesson"
  action     String // например: "read", "write"
  scope      String // например: "own", "all"
  userGroups UserGroupPermission[]

  @@unique([type, action, scope])
}

model UserGroupPermission {
  userGroupId  Int
  permissionId Int

  userGroup  UserGroup  @relation(fields: [userGroupId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([userGroupId, permissionId])
}

model UserGroup {
  userId   Int
  id       Int      @default(autoincrement())
  joinedAt DateTime @default(now())

  permissions UserGroupPermission[]
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([id])
  @@index([id])
}

//////////////////////
// STUDENT / GUARDIAN / FAMILY
//////////////////////

enum GuardianType {
  PARENT
  TUTOR
  CAREGIVER
}

enum FamilyMemberRole {
  STUDENT
  GUARDIAN
}

model Student {
  id         Int     @id @default(autoincrement())
  personId   Int     @unique
  externalId String?

  person Person @relation(fields: [personId], references: [id])

  families         FamilyMember[]
  groupMemberships GroupMembership[]
}

model Guardian {
  id       Int          @id @default(autoincrement())
  personId Int          @unique
  type     GuardianType @default(PARENT)

  person   Person         @relation(fields: [personId], references: [id])
  families FamilyMember[]
}

model Family {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  name      String?
  createdAt DateTime @default(now())

  members FamilyMember[]
}

model FamilyMember {
  id         Int              @id @default(autoincrement())
  familyId   Int
  role       FamilyMemberRole
  studentId  Int?
  guardianId Int?
  joinedAt   DateTime         @default(now())

  family   Family    @relation(fields: [familyId], references: [id], onDelete: Cascade)
  student  Student?  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  guardian Guardian? @relation(fields: [guardianId], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@index([studentId])
  @@index([guardianId])
}

//////////////////////
// ACADEMIC YEAR / EDU GROUPS / MEMBERSHIP
//////////////////////

model AcademicYear {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  startsOn  DateTime
  endsOn    DateTime
  createdAt DateTime @default(now())

  groups EduGroup[]
}

model EduGroup {
  id             Int      @id @default(autoincrement())
  key            String   @unique
  name           String
  gradeLevel     Int?
  academicYearId Int
  track          String?
  createdAt      DateTime @default(now())

  academicYear AcademicYear      @relation(fields: [academicYearId], references: [id])
  memberships  GroupMembership[]
  lessons      Lesson[]

  @@index([academicYearId])
}

model GroupMembership {
  id        Int       @id @default(autoincrement())
  studentId Int
  groupId   Int
  since     DateTime  @default(now())
  until     DateTime?

  student Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  group   EduGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([studentId, groupId, since])
  @@index([groupId])
}

//////////////////////
// BUILDING / ROOM / CAPABILITIES
//////////////////////

model Building {
  id        Int      @id @default(autoincrement())
  name      String
  address   String?
  createdAt DateTime @default(now())

  rooms Room[]
}

model Room {
  id         Int     @id @default(autoincrement())
  buildingId Int
  name       String
  capacity   Int?
  notes      String?

  building     Building         @relation(fields: [buildingId], references: [id])
  capabilities RoomCapability[]
  lessons      Lesson[]

  @@unique([buildingId, name])
  @@index([buildingId])
}

enum CapabilityValueType {
  BOOL
  ENUM
  INT
  TEXT
}

model Capability {
  id        Int                 @id @default(autoincrement())
  key       String              @unique
  name      String
  valueType CapabilityValueType
  createdAt DateTime            @default(now())

  options    CapabilityOption[]
  roomValues RoomCapability[]
  subjRules  SubjectCapabilityRule[]
}

model CapabilityOption {
  id           Int    @id @default(autoincrement())
  capabilityId Int
  key          String
  name         String
  sort         Int    @default(0)

  capability   Capability                    @relation(fields: [capabilityId], references: [id], onDelete: Cascade)
  roomCaps     RoomCapability[]
  subjRules    SubjectCapabilityRule[]
  subjRuleOpts SubjectCapabilityRuleOption[]

  @@unique([capabilityId, key])
  @@index([capabilityId])
}

model RoomCapability {
  roomId       Int
  capabilityId Int

  room       Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  capability Capability @relation(fields: [capabilityId], references: [id], onDelete: Cascade)

  boolValue Boolean?
  intValue  Int?
  textValue String?
  optionId  Int?
  option    CapabilityOption? @relation(fields: [optionId], references: [id])

  @@id([roomId, capabilityId])
  @@index([capabilityId])
}

//////////////////////
// SUBJECTS + CAPABILITY RULES
//////////////////////

model Subject {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())

  rules   SubjectCapabilityRule[]
  lessons Lesson[]
}

enum CapabilityOperator {
  REQUIRED
  PROHIBITED
  EQUALS
  IN
  GTE
  LTE
}

model SubjectCapabilityRule {
  id           Int                @id @default(autoincrement())
  subjectId    Int
  capabilityId Int
  operator     CapabilityOperator

  subject    Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  capability Capability @relation(fields: [capabilityId], references: [id], onDelete: Cascade)

  boolValue Boolean?
  intValue  Int?
  textValue String?
  optionId  Int?
  option    CapabilityOption? @relation(fields: [optionId], references: [id])

  optionsIn SubjectCapabilityRuleOption[]

  @@unique([subjectId, capabilityId, operator])
  @@index([capabilityId])
}

model SubjectCapabilityRuleOption {
  ruleId   Int
  optionId Int

  rule   SubjectCapabilityRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  option CapabilityOption      @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@id([ruleId, optionId])
}

//////////////////////
// STAFF / AVAILABILITY / EXCEPTIONS
//////////////////////

enum StaffType {
  TEACHER
  ADMIN
  SUPPORT
}

model Staff {
  id        Int       @id @default(autoincrement())
  personId  Int       @unique
  type      StaffType
  createdAt DateTime  @default(now())

  person         Person              @relation(fields: [personId], references: [id])
  availabilities StaffAvailability[]
  exceptions     StaffException[]
  lessons        Lesson[]            @relation("LessonTeacher")
}

model StaffAvailability {
  id            Int       @id @default(autoincrement())
  staffId       Int
  weekday       Int
  startsAtMin   Int
  endsAtMin     Int
  intervalWeeks Int       @default(1)
  weekOffset    Int       @default(0)
  validFrom     DateTime?
  validUntil    DateTime?

  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@index([staffId, weekday])
}

model StaffException {
  id      Int      @id @default(autoincrement())
  staffId Int
  date    DateTime
  reason  String?

  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([staffId, date])
  @@index([staffId, date])
}

//////////////////////
// SCHEDULING (LESSONS + BATCHES + EVENTS)
//////////////////////

enum LessonStatus {
  SCHEDULED
  CANCELED
  COMPLETED
  DRAFT
}

model LessonBatch {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  title     String?
  notes     String?
  createdAt DateTime @default(now())
  createdBy Int?

  creator User?         @relation("LessonBatchCreatedBy", fields: [createdBy], references: [id])
  events  LessonEvent[]
  lessons Lesson[]

  @@index([key])
  @@index([createdAt])
}

enum LessonEventType {
  CREATED
  PUBLISHED
  UNPUBLISHED
  ARCHIVED
  NOTE
}

model LessonEvent {
  id        Int             @id @default(autoincrement())
  batchId   Int
  type      LessonEventType
  createdAt DateTime        @default(now())
  createdBy Int?
  message   String?

  batch   LessonBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  creator User?       @relation("LessonEventCreatedBy", fields: [createdBy], references: [id])

  @@index([batchId])
  @@index([createdAt])
  @@index([type])
}

model Lesson {
  id          Int      @id @default(autoincrement())
  date        DateTime
  startsAtMin Int
  endsAtMin   Int

  groupId   Int
  roomId    Int
  subjectId Int
  teacherId Int
  batchId   Int?

  status LessonStatus @default(DRAFT)

  group   EduGroup     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  room    Room         @relation(fields: [roomId], references: [id])
  subject Subject      @relation(fields: [subjectId], references: [id])
  teacher Staff        @relation("LessonTeacher", fields: [teacherId], references: [id])
  batch   LessonBatch? @relation(fields: [batchId], references: [id])

  @@index([date, startsAtMin, endsAtMin])
  @@index([roomId, date, startsAtMin])
  @@index([teacherId, date, startsAtMin])
  @@index([groupId, date, startsAtMin])
  @@index([status])
  @@index([batchId])
}
